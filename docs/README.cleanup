# Galaxy/Starburst99 Code Cleanup and Modernization

This document describes the modernization and cleanup of the Galaxy/Starburst99 population synthesis code, including upgrading to Fortran 2018 standards.

## Changes Made

1. **Module Structure**
   - Created `galaxy_module.f90` to encapsulate global variables and constants
   - Implemented proper Fortran 2018 modules with explicit public/private attributes
   - Added submodule implementation for error handling functionality
   - Replaced implicit globals with explicit module variables
   - Added proper data encapsulation with derived types and type-bound procedures
   - Added utility routines for common operations (file I/O, etc.)

2. **Fortran 2018 Features**
   - Used named constants instead of literals
   - Implemented allocatable character strings
   - Added pure and elemental procedures
   - Used block constructs for structured scoping
   - Employed associate construct for better readability
   - Applied error stop instead of traditional stop
   - Utilized Fortran 2018 error handling with iomsg
   - Implemented user-defined derived types with procedures
   - Added abstract interfaces
   - Used the source= specifier in allocations

3. **Code Structure**
   - Added comprehensive structured comments for documentation
   - Added proper section headers for better readability
   - Used named loops and blocks with exit labels
   - Added defensive programming with input validation
   - Enhanced logging and status reporting

4. **Shell Scripts**
   - Converted csh scripts to modern bash
   - Added command-line argument support
   - Added better error handling and reporting
   - Improved usability with better messages and help

5. **Makefile**
   - Updated for Fortran 2018 with gfortran
   - Added proper dependency tracking
   - Set appropriate compiler flags for standards compliance
   - Added debug target with enhanced diagnostics
   - Added clean target for easier maintenance

## Specific Subroutines Modernized

1. **Main Program**: Complete Fortran 2018 overhaul with modern constructs and improved flow control
2. **input**: Implemented Fortran 2018 I/O with improved error handling and parameter validation
3. **density**: Completely restructured with better documentation and numerical stability
4. **read_tracks**: Modernized with detailed error handling and block constructs
5. **galaxy_module**: Created new Fortran 2018 module with derived types and submodules

## Build and Run Instructions

1. Compile using the updated Makefile (automatically handles dependencies):
   ```bash
   make clean
   make
   ```

2. For debugging with additional checks:
   ```bash
   make debug
   ```

3. Run with the improved scripts (command-line arguments now supported):
   ```bash
   cd output
   ./go_galaxy [input_file] [output_prefix] [ext_number]
   ```

## Structure of the Modernized Code

- **galaxy_module.f90**: Main module with Fortran 2018 features
  - Explicit public/private interfaces
  - Derived types with type-bound procedures
  - Abstract interfaces
  - Constants and parameters
  - Utility routines

- **galaxy_module_error.f90**: Submodule for error handling
  - Implements error_handler procedure
  - Provides robust error reporting

- **starburst_main.f90**: Main program and subroutines (renamed from galaxy.f90)
  - Uses module for shared data
  - Implements Fortran 2018 constructs throughout
  - Structured program flow with blocks
  - Advanced error handling
  - Progress reporting and logging

- **Output Scripts**: 
  - `go_galaxy`: Main run script with parameter handling
  - `save_output`: Output file management with error checking

## File Naming Strategy

The code files were renamed to follow modern Fortran conventions:

1. **Module files**: Named after their contents with _module suffix
   - galaxy_module.f90: Contains main data structures and interfaces
   - galaxy_module_error.f90: Submodule implementing error handling

2. **Main program file**: Named to reflect its purpose  
   - starburst_main.f90: Contains the main program and primary subroutines
   
3. **Executable name**: Kept as "galaxy" for backward compatibility with existing scripts and documentation

This naming strategy provides clear separation between modules and main program, while maintaining compatibility with existing workflows.

## Fortran 2018 Features Used

1. **Submodules**: Separating interface from implementation
2. **Derived Types**: Advanced data structures with type-bound procedures
3. **Block Construct**: Improved scoping and variable management
4. **Associate Construct**: Cleaner code with meaningful aliases
5. **Allocatable Character Strings**: Dynamic string handling
6. **Pure and Elemental Functions**: Side-effect free operations
7. **Enhanced Error Handling**: Using iostat and iomsg attributes
8. **Abstract Interfaces**: For callback functions and procedure types
9. **Enhanced I/O**: Better file handling and error reporting

## Running a Simulation

1. Edit input parameters in `output/standard.input1`
2. Run the simulation:
   ```bash
   cd output
   ./go_galaxy standard.input1 my_model 1
   ```
3. Results will be saved as `my_model.spectrum1`, `my_model.color1`, etc.
4. Review the log for execution summary and any warnings

## JSON Data Conversion

1. **Converter Module**
   - Created `galaxy_dat2json.f90` module implementing Fortran 2018 standards
   - Added specialized routines for each data file format
   - Implemented robust error handling for all I/O operations
   - Used modern Fortran for file parsing and JSON generation

2. **Converter Program**
   - Implemented `convert_to_json.f90` standalone program
   - Added command-line argument parsing with help functionality
   - Created specific handlers for different file types
   - Generated properly formatted JSON with metadata

3. **Build Integration**
   - Added JSON converter targets to Makefile
   - Created `convert-json` target for batch conversion
   - Updated help text and documentation for JSON functionality
   - Added automated installation of converter program

4. **Conversion Scripts**
   - Created `convert_all_to_json.sh` for batch processing with Fortran
   - Implemented proper error handling and reporting
   - Added detection for different file types
   - Generated output in structured `json_data` directory
   - Added comprehensive README.md for the JSON data
   
5. **Python Converter**
   - Created `convert_data_to_json.py` Python converter for handling binary files
   - Implemented robust error handling for malformed data
   - Added binary file detection and specialized parsers
   - Created `convert_all_data.sh` script to run Python converter
   - Added detailed metadata to JSON output for debugging

6. **Documentation**
   - Added JSON conversion documentation to main README.md
   - Created dedicated JSON data documentation
   - Included usage examples for different programming languages
   - Documented the JSON data structure for each file type

## Potential Future Improvements

1. Implement parallel computing with Fortran 2018 coarrays
2. Add proper units and dimensions management in types
3. Create a dedicated I/O module for standardized file handling
4. Add runtime performance monitoring and profiling
5. Create test suite with modern Fortran testing frameworks
6. Further modularize into feature-specific modules
7. Add proper logging with configurable verbosity levels
8. Extend JSON conversion with additional metadata
9. Create visualization tools for JSON data
10. Implement web API for accessing simulation data